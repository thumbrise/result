<?php

namespace Thumbrise\Result\UseCaseResult\GoogleTypes;

use Thumbrise\Result\UseCaseResult\UseCaseResult;

class UseCaseResultAborted extends UseCaseResult
{
    /**
     * Concurrency conflict, such as read-modify-write conflict.
     *
     * ExampleErrorMessage - Couldnâ€™t acquire lock on resource 'xxx'.
     *
     * @param string                $reason   The reason of the error. This is a constant value that identifies the proximate cause of the error. ErrorCommon reasons are unique within a particular domain of errors. This should be at most 63 characters and match a regular expression of `[A-Z][A-Z0-9_]+[A-Z0-9]`, which represents UPPER_SNAKE_CASE.
     * @param string                $domain   The logical grouping to which the "reason" belongs. The error domain is typically the registered service name of the tool or product that generates the error. Example: "pubsub. googleapis. com". If the error is generated by some common infrastructure, the error domain must be a globally unique value that identifies the infrastructure. For Google API infrastructure, the error domain is "googleapis. com".
     * @param array<string, string> $metadata Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in length. When identifying the current value of an exceeded limit, the units should be contained in the key, not the value. For example, rather than {"instanceLimit": "100/ request"}, should be returned as, {"instanceLimitPerRequest": "100"}, if the client exceeds the number of instances that can be created in a single (batch) request.
     */
    public function __construct(
        private readonly string $reason,
        private readonly string $domain,
        private readonly array $metadata,
    ) {
        parent::__construct();
    }

    public function isError(): bool
    {
        return true;
    }

    protected function errorStatus(): string
    {
        return 'ABORTED';
    }

    protected function httpCode(): int
    {
        return 409;
    }

    protected function output(): mixed
    {
        return null;
    }

    protected function errorDetails(): array
    {
        return [
            'reason'   => $this->reason,
            'domain'   => $this->domain,
            'metadata' => $this->metadata,
        ];
    }

    protected function errorMessage(): string
    {
        return 'Operation aborted';
    }
}
